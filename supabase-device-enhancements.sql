-- Supabase Device Enhancements Migration
-- Run this script in your Supabase SQL editor (or add it to a migration) to
-- extend the existing `devices` table and create the history tables used by the
-- CSV ingestion pipeline (GasGage, LatestTotal, WarningHistory, Yields/Consumables).

-- 1. Extend the devices table with identifiers and tracking metadata.
ALTER TABLE public.devices
  ADD COLUMN IF NOT EXISTS device_id TEXT,
  ADD COLUMN IF NOT EXISTS center_id TEXT,
  ADD COLUMN IF NOT EXISTS code_name TEXT,
  ADD COLUMN IF NOT EXISTS service_office TEXT,
  ADD COLUMN IF NOT EXISTS department TEXT,
  ADD COLUMN IF NOT EXISTS device_host_name TEXT,
  ADD COLUMN IF NOT EXISTS last_seen_at TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS last_meter_received_at TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS offline_threshold_minutes INTEGER DEFAULT 60;

-- Default the new device_id to the serial_number if present so existing rows stay usable.
UPDATE public.devices
SET device_id = serial_number
WHERE device_id IS NULL AND serial_number IS NOT NULL;

-- Keep last_seen_at in sync with the legacy last_updated_at column if it exists.
UPDATE public.devices
SET last_seen_at = COALESCE(last_seen_at, last_updated_at)
WHERE last_seen_at IS NULL AND last_updated_at IS NOT NULL;

-- Ensure there is an updated timestamp value for new rows.
UPDATE public.devices
SET updated_at = COALESCE(updated_at, NOW())
WHERE updated_at IS NULL;

-- Optional: enforce uniqueness on serial_number once duplicates are cleaned up.
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM information_schema.table_constraints
    WHERE table_schema = 'public'
      AND table_name = 'devices'
      AND constraint_type IN ('PRIMARY KEY', 'UNIQUE')
      AND constraint_name = 'devices_serial_number_key'
  ) THEN
    IF EXISTS (
      SELECT serial_number
      FROM public.devices
      WHERE serial_number IS NOT NULL
      GROUP BY serial_number
      HAVING COUNT(*) > 1
    ) THEN
      RAISE NOTICE 'Skipped adding unique constraint on devices.serial_number because duplicates exist.';
    ELSE
      ALTER TABLE public.devices
        ADD CONSTRAINT devices_serial_number_key UNIQUE (serial_number);
    END IF;
  END IF;
END $$;

-- Optional: enforce uniqueness on the new device_id when data has been normalised.
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM information_schema.table_constraints
    WHERE table_schema = 'public'
      AND table_name = 'devices'
      AND constraint_name = 'devices_device_id_key'
  ) THEN
    IF EXISTS (
      SELECT device_id
      FROM public.devices
      WHERE device_id IS NOT NULL
      GROUP BY device_id
      HAVING COUNT(*) > 1
    ) THEN
      RAISE NOTICE 'Skipped adding unique constraint on devices.device_id because duplicates exist.';
    ELSE
      ALTER TABLE public.devices
        ADD CONSTRAINT devices_device_id_key UNIQUE (device_id);
    END IF;
  END IF;
END $$;

-- Helpful indexes for dashboard lookups.
CREATE INDEX IF NOT EXISTS idx_devices_last_seen_at ON public.devices (last_seen_at DESC NULLS LAST);
CREATE INDEX IF NOT EXISTS idx_devices_customer_name ON public.devices (customer_name);
CREATE INDEX IF NOT EXISTS idx_devices_device_id ON public.devices (device_id);

-- 2. Time-series toner snapshots captured from CSV imports (GasGage/Consumables).
CREATE TABLE IF NOT EXISTS public.device_toner_snapshots (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  device_id TEXT,
  serial_number TEXT,
  snapshot_source TEXT CHECK (snapshot_source IN ('gas_gage', 'consumables', 'manual')),
  captured_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  black NUMERIC,
  cyan NUMERIC,
  magenta NUMERIC,
  yellow NUMERIC,
  special_color NUMERIC,
  waste_toner NUMERIC,
  raw JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE public.device_toner_snapshots
  ADD COLUMN IF NOT EXISTS device_id TEXT,
  ADD COLUMN IF NOT EXISTS serial_number TEXT,
  ADD COLUMN IF NOT EXISTS snapshot_source TEXT,
  ADD COLUMN IF NOT EXISTS captured_at TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS black NUMERIC,
  ADD COLUMN IF NOT EXISTS cyan NUMERIC,
  ADD COLUMN IF NOT EXISTS magenta NUMERIC,
  ADD COLUMN IF NOT EXISTS yellow NUMERIC,
  ADD COLUMN IF NOT EXISTS special_color NUMERIC,
  ADD COLUMN IF NOT EXISTS waste_toner NUMERIC,
  ADD COLUMN IF NOT EXISTS raw JSONB,
  ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ;

CREATE INDEX IF NOT EXISTS idx_device_toner_snapshots_device_time
  ON public.device_toner_snapshots (device_id, captured_at DESC);

-- 3. Meter readings history (LatestTotal CSV).
CREATE TABLE IF NOT EXISTS public.device_meter_readings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  device_id TEXT,
  serial_number TEXT,
  captured_at TIMESTAMPTZ NOT NULL,
  total BIGINT,
  printer_total BIGINT,
  copy_total BIGINT,
  scan_total BIGINT,
  duplex_total BIGINT,
  black_total BIGINT,
  color_total BIGINT,
  meter_a BIGINT,
  meter_b BIGINT,
  meter_c BIGINT,
  raw JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE (device_id, captured_at)
);

ALTER TABLE public.device_meter_readings
  ADD COLUMN IF NOT EXISTS device_id TEXT,
  ADD COLUMN IF NOT EXISTS serial_number TEXT,
  ADD COLUMN IF NOT EXISTS captured_at TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS total BIGINT,
  ADD COLUMN IF NOT EXISTS printer_total BIGINT,
  ADD COLUMN IF NOT EXISTS copy_total BIGINT,
  ADD COLUMN IF NOT EXISTS scan_total BIGINT,
  ADD COLUMN IF NOT EXISTS duplex_total BIGINT,
  ADD COLUMN IF NOT EXISTS black_total BIGINT,
  ADD COLUMN IF NOT EXISTS color_total BIGINT,
  ADD COLUMN IF NOT EXISTS meter_a BIGINT,
  ADD COLUMN IF NOT EXISTS meter_b BIGINT,
  ADD COLUMN IF NOT EXISTS meter_c BIGINT,
  ADD COLUMN IF NOT EXISTS raw JSONB,
  ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ;

CREATE INDEX IF NOT EXISTS idx_device_meter_readings_device_time
  ON public.device_meter_readings (device_id, captured_at DESC);

-- 4. Warning history (WarningHistory CSV).
CREATE TABLE IF NOT EXISTS public.device_warning_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  device_id TEXT,
  serial_number TEXT,
  alert_code TEXT,
  message TEXT,
  warning_type TEXT,
  received_at_server TIMESTAMPTZ,
  occurred_at_device TIMESTAMPTZ,
  recovered_at_server TIMESTAMPTZ,
  recovered_at_device TIMESTAMPTZ,
  recovered BOOLEAN,
  raw JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE public.device_warning_events
  ADD COLUMN IF NOT EXISTS device_id TEXT,
  ADD COLUMN IF NOT EXISTS serial_number TEXT,
  ADD COLUMN IF NOT EXISTS alert_code TEXT,
  ADD COLUMN IF NOT EXISTS message TEXT,
  ADD COLUMN IF NOT EXISTS warning_type TEXT,
  ADD COLUMN IF NOT EXISTS received_at_server TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS occurred_at_device TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS recovered_at_server TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS recovered_at_device TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS recovered BOOLEAN,
  ADD COLUMN IF NOT EXISTS raw JSONB,
  ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ;

CREATE INDEX IF NOT EXISTS idx_device_warning_events_device_time
  ON public.device_warning_events (device_id, received_at_server DESC);

-- 5. Consumable lifecycle events (Yields_Consumables CSV).
CREATE TABLE IF NOT EXISTS public.device_consumable_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  device_id TEXT,
  serial_number TEXT,
  event_type TEXT,
  warning_code TEXT,
  description TEXT,
  status TEXT,
  tc NUMERIC,
  captured_at TIMESTAMPTZ,
  raw JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE public.device_consumable_events
  ADD COLUMN IF NOT EXISTS device_id TEXT,
  ADD COLUMN IF NOT EXISTS serial_number TEXT,
  ADD COLUMN IF NOT EXISTS event_type TEXT,
  ADD COLUMN IF NOT EXISTS warning_code TEXT,
  ADD COLUMN IF NOT EXISTS description TEXT,
  ADD COLUMN IF NOT EXISTS status TEXT,
  ADD COLUMN IF NOT EXISTS tc NUMERIC,
  ADD COLUMN IF NOT EXISTS captured_at TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS raw JSONB,
  ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ;

CREATE INDEX IF NOT EXISTS idx_device_consumable_events_device_time
  ON public.device_consumable_events (device_id, captured_at DESC NULLS LAST);

-- 6. Import job audit table (optional but recommended for admin pages).
CREATE TABLE IF NOT EXISTS public.import_jobs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  source_file TEXT NOT NULL,
  source_type TEXT NOT NULL,
  imported_by UUID,
  imported_at TIMESTAMPTZ DEFAULT NOW(),
  row_count INTEGER,
  status TEXT DEFAULT 'succeeded',
  details JSONB
);

ALTER TABLE public.import_jobs
  ADD COLUMN IF NOT EXISTS source_file TEXT,
  ADD COLUMN IF NOT EXISTS source_type TEXT,
  ADD COLUMN IF NOT EXISTS imported_by UUID,
  ADD COLUMN IF NOT EXISTS imported_at TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS row_count INTEGER,
  ADD COLUMN IF NOT EXISTS status TEXT,
  ADD COLUMN IF NOT EXISTS details JSONB;

ALTER TABLE public.orders
  ADD COLUMN IF NOT EXISTS ordered_at TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS sales_order_number TEXT;

CREATE INDEX IF NOT EXISTS idx_import_jobs_imported_at
  ON public.import_jobs (imported_at DESC);

DROP VIEW IF EXISTS public.device_status;
DROP VIEW IF EXISTS public.device_current_toner CASCADE;
CREATE VIEW public.device_current_toner
WITH (security_invoker = true) AS
SELECT DISTINCT ON (device_id)
  device_id,
  serial_number,
  captured_at,
  black,
  cyan,
  magenta,
  yellow,
  waste_toner,
  special_color
FROM public.device_toner_snapshots
ORDER BY device_id, captured_at DESC;

CREATE VIEW public.device_status
WITH (security_invoker = true) AS
SELECT
  d.device_id,
  d.serial_number,
  d.model,
  d.customer_name,
  d.location,
  d.last_seen_at,
  d.last_meter_received_at,
  d.offline_threshold_minutes,
  (NOW() - d.last_seen_at) > (COALESCE(d.offline_threshold_minutes, 60) * INTERVAL '1 minute') AS is_offline,
  d.toner_k_percent,
  d.toner_c_percent,
  d.toner_m_percent,
  d.toner_y_percent,
  d.waste_toner_percent
FROM public.devices d;

COMMENT ON VIEW public.device_current_toner IS 'Latest toner snapshot per device for dashboard widgets.';
COMMENT ON VIEW public.device_status IS 'Device status summary including offline detection based on last_seen_at.';

ALTER TABLE IF EXISTS public.device_toner_snapshots ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.device_meter_readings ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.device_warning_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.device_consumable_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.import_jobs ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Allow authenticated access to device_toner_snapshots" ON public.device_toner_snapshots;
DROP POLICY IF EXISTS "Allow authenticated access to device_meter_readings" ON public.device_meter_readings;
DROP POLICY IF EXISTS "Allow authenticated access to device_warning_events" ON public.device_warning_events;
DROP POLICY IF EXISTS "Allow authenticated access to device_consumable_events" ON public.device_consumable_events;
DROP POLICY IF EXISTS "Allow authenticated access to import_jobs" ON public.import_jobs;

CREATE POLICY "Allow authenticated access to device_toner_snapshots"
  ON public.device_toner_snapshots
  FOR ALL
  USING (auth.role() = 'authenticated')
  WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated access to device_meter_readings"
  ON public.device_meter_readings
  FOR ALL
  USING (auth.role() = 'authenticated')
  WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated access to device_warning_events"
  ON public.device_warning_events
  FOR ALL
  USING (auth.role() = 'authenticated')
  WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated access to device_consumable_events"
  ON public.device_consumable_events
  FOR ALL
  USING (auth.role() = 'authenticated')
  WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated access to import_jobs"
  ON public.import_jobs
  FOR ALL
  USING (auth.role() = 'authenticated')
  WITH CHECK (auth.role() = 'authenticated');

ALTER TABLE IF EXISTS public."Warning_History" ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Allow service role access to Warning_History" ON public."Warning_History";

CREATE POLICY "Allow service role access to Warning_History"
  ON public."Warning_History"
  FOR ALL
  USING (auth.role() = 'service_role')
  WITH CHECK (auth.role() = 'service_role');
